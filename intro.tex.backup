\section{Introduction}
\noindent
A real time system is an information processing system which has to respond to an externally generated input stimuli within 
a finite and specified period. Correctness of a real time system depends not only on the logical result of input but also on 
the time at which the result is produced. In these systems, the main challenge is to guarantee maximum number of execution
of real time tasks by reducing the number of deadline misses. Several scheduling algorithms have been proposed to schedule the 
tasks at the processor level. Uniprocessor schedulers mostly use Earliest Deadline First (EDF)~\cite{wiki:xxx2} or Rate 
Monotonic Scheduling (RMS)~\cite{wiki:xxx3} to schedule tasks at the processor level. Scheduling of tasks in multi-core 
systems has also been proposed in~\cite{Giannopoulou:2013:SMA:2555754.2555771}. 
Each task instance consists of multiple instructions, some of which are compute intensive, while others are memory intensive. 
%Thus, memory intensive tasks require frequent memory accesses. 
In modern DRAM architectures, instructions are executed on the basis of a row-hit policy, i.e., instructions which result in 
row hit are given preference to execute first. Though 
EDF or RMS is carried out at the processor level, most of the real time tasks are not executed in the same sequence in the 
memory as they are scheduled at the processor. As a result, most of the real-time tasks fail to meet their deadlines while
waiting in the buffer for memory access if not scheduled and executed within their deadline.

Several techniques have been proposed and adopted in real time predictable DRAM controllers.
In~\cite{yun2014palloc}, PALLOC, a DRAM bank aware memory controller has been proposed which exploits the page-based virtual 
memory system to avoid bank sharing among cores.
%, thereby improving isolation on COTS multicore platforms without requiring any 
%special hardware support. 
\cite{kim2014bounding} proposes techniques to provide a tight upper bound on the 
worst-case memory interference in COTS multi-core systems. 
%But a task running on one core may get delayed by other task 
%running on the other core due to shared resources. 
A predictable DRAM controller design has been proposed in 
PRET~\cite{reineke2011pret}, where DRAM act as multiple resources that can be shared between one or more requests 
individually by interleaving accesses to blocks of DRAM. \cite{Akesson11-DATE} proposes bank interleaving and a close page 
policy with a pre-defined command sequence. Again \cite{akesson2008real} suggests a Credit-Controlled Static-Priority 
to provide minimum bandwidth for each request with bounded latencies. \cite{paolieri2013timing} deals with an analytical 
model to compute worst case delay considering all memory interferences generated by co-running tasks. 
\cite{Goossens13CODES} proposes a method for composable service to memory clients by composable memory 
patterns. In~\cite{hassan2017predictable}, memory requests are scheduled using time-division-multiplexing scheduler and a 
framework has been developed to statically analyse the tasks to meet the timing requirements of all tasks. 

In this paper, we propose a bank aware memory scheduling policy to schedule tasks at the memory 
controller on the basis of a cost function. We have implemented a
two-level scheduler, one at the processor level and the other at the memory controller, to schedule tasks in real time 
platforms. Our proposed method has been compared with existing state-of-the-art memory controllers on different 
benchmark programs of the Malardalen WCET~\cite{gustafsson2010malardalen}. Results on different benchmark 
programs show the efficiency of our proposed method. 

The rest of the paper is organized as follows: Section \ref{back} discusses some background concepts. 
In Section \ref{mot}, we discuss the problem in the context of DRAM with the help of an example and also our proposed 
solution. Section \ref{imple} describes the implementation and results and Section \ref{con} concludes the paper.

